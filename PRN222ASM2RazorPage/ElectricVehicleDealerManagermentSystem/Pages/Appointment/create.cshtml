@page "/appointment/create"
@model ElectricVehicleDealerManagermentSystem.Pages.Appointment.createModel
@{
    ViewData["Title"] = "Create New Appointment";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h3 class="fw-bold text-success">
                <i class="fas fa-plus-circle me-2"></i>Create New Appointment
            </h3>
            <p class="text-muted mb-0">Welcome, @Model.CustomerName</p>
        </div>
        <a href="/appointment" class="btn btn-secondary">
            <i class="fas fa-arrow-left me-1"></i> Back to Appointments
        </a>
    </div>

    @if (!string.IsNullOrEmpty(Model.ErrorMessage))
    {
        <div class="alert alert-danger">@Model.ErrorMessage</div>
    }
    @if (!string.IsNullOrEmpty(Model.SuccessMessage))
    {
        <div class="alert alert-success">@Model.SuccessMessage</div>
    }
    @if (Model.IsVehiclePreSelected)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            <i class="fas fa-info-circle me-2"></i>
            <strong>Vehicle Pre-selected!</strong> The vehicle you were viewing has been automatically selected for your appointment.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="card shadow-sm">
        <div class="card-header bg-success text-white">
            <i class="fas fa-calendar-plus me-2"></i>Appointment Details
        </div>
        <div class="card-body">
            <form method="post">
                <div class="row g-3">
                    <div class="col-md-6">
                        <label asp-for="NewAppointment.VehicleId" class="form-label fw-semibold">
                            <i class="fas fa-car me-1"></i>Vehicle
                        </label>
                        <select asp-for="NewAppointment.VehicleId" asp-items="Model.VehicleSelectList" class="form-select" id="vehicleSelect"></select>
                        <span asp-validation-for="NewAppointment.VehicleId" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label asp-for="NewAppointment.AppointmentDate" class="form-label fw-semibold">
                            <i class="fas fa-clock me-1"></i>Selected Slot
                        </label>
                        <input asp-for="NewAppointment.AppointmentDate" type="datetime-local" class="form-control" readonly />
                        <span asp-validation-for="NewAppointment.AppointmentDate" class="text-danger"></span>
                    </div>
                </div>

                <div class="mt-4">
                    <h5 class="fw-semibold mb-3"><i class="fas fa-calendar-alt me-2"></i>Select Available Time Slot</h5>
                    <div id="calendar"></div>
                </div>

                <div class="mt-4 text-end">
                    <button type="submit" class="btn btn-success px-4">
                        <i class="fas fa-save me-1"></i>Book Appointment
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <!-- ✅ FullCalendar -->
    <link href="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.9/index.global.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@6.1.9/index.global.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const calendarEl = document.getElementById('calendar');
            const vehicleSelect = document.getElementById('vehicleSelect');
            const dateInput = document.querySelector("input[name='NewAppointment.AppointmentDate']");

            let calendar;

            function initCalendar() {
                calendar = new FullCalendar.Calendar(calendarEl, {
                    initialView: 'dayGridMonth',
                    height: 700,
                    headerToolbar: {
                        left: 'prev,next today',
                        center: 'title',
                        right: 'dayGridMonth,timeGridWeek,timeGridDay'
                    },
                    eventClick: function (info) {
                        // ✅ Convert UTC to local time (GMT+7)
                        const utcDate = new Date(info.event.start);
                        const localDate = new Date(utcDate.getTime() + (7 * 60 * 60 * 1000)); // add +7 hours
                        const localISO = localDate.toISOString().slice(0, 16);

                        dateInput.value = localISO;
                        alert(`Selected slot: ${info.event.title} on ${localDate.toLocaleString()}`);
                    }
                });
                calendar.render();
            }

            function loadAvailableSlots(vehicleId) {
                if (!vehicleId) return;

                const today = new Date();
                const year = today.getFullYear();
                const month = today.getMonth() + 1;

                fetch(`/appointment/create?handler=MonthlyCalendar&year=${year}&month=${month}`)
                    .then(res => res.json())
                    .then(data => {
                        calendar.removeAllEvents();

                        data.days.forEach(day => {
                            if (day.hasSlots) {
                                day.slots.forEach(slot => {
                                    // Convert server UTC time to local before adding event
                                    const utcSlot = new Date(slot.value);
                                    const localSlot = new Date(utcSlot.getTime());

                                    calendar.addEvent({
                                        title: slot.time,
                                        start: localSlot.toISOString(),
                                        backgroundColor: '#198754',
                                        borderColor: '#198754'
                                    });
                                });
                            }
                        });
                    })
                    .catch(err => console.error('Error loading calendar slots:', err));
            }

            initCalendar();

            // Load slots immediately if vehicle is pre-selected (from vehicle detail page)
            if (vehicleSelect.value) {
                loadAvailableSlots(vehicleSelect.value);
            }

            vehicleSelect.addEventListener('change', function () {
                loadAvailableSlots(this.value);
            });
        });
    </script>
}
